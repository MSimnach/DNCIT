% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DNCIT.R
\name{DNCIT}
\alias{DNCIT}
\title{Conditional Independence Test for images and scalars, given vector-valued confounders}
\usage{
DNCIT(
  X,
  Y,
  Z,
  embedding_map_with_parameters = "feature_representations",
  cit_with_parameters = list(cit = "RCOT", params_cit = list(seed = 123))
)
}
\arguments{
\item{X}{A nxp-matrix of n p-dimensional (vectorized) images or a feature representation of the images}

\item{Y}{A nx1-matrix of n univariate target variables}

\item{Z}{A q-dimensional vector-valued confounder (optional)}

\item{embedding_map_with_parameters}{A list for the embedding map and its parameters. Default is "open_ai_clip" and "PIL", select 'feature_representations' if X already a feature representation.}

\item{cit_with_parameters}{The cit and its parameters applied to the feature representations, Y and Z. Default is "RCOT"}
}
\value{
list of p-value, test statistic and runtime
}
\description{
Deep nonparametric conditional Independence Test (CIT) (DNCIT) consisting of a modular framework for
(nonparametric) CITs applied to feature representations of images and scalars, given confounders,
and embedding maps applied to the images to obtain feature representations.
}
\details{
The function allows you to specify an embedding map which maps the images onto feature representations.
If no embedding map is specified, X should be a matrix of feature representations of the images.

The function allows you to specify a CIT from a list of CITs. The default is the Randomized Correlation
Test (RCOT) since it performed best for sample sizes above 1100 in the paper.
}
\examples{
if (requireNamespace("RCIT", quietly = TRUE) && requireNamespace("momentchi2", quietly = TRUE)) {
  withr::local_package("momentchi2")
  withr::local_package("RCIT")
  n <- 100; p <- 10; q <- 2
  X <- matrix(rnorm(n*p), nrow = n, ncol = p)
  Y <- matrix(rnorm(n), nrow = n)
  Z <- matrix(rnorm(n*q), nrow = n, ncol = q)
  res <- DNCIT(X, Y, Z, embedding_map_with_parameters = 'feature_representations')
}
}
